#!/usr/bin/perl

# Perl script to generate the Hamiltonian Path (undirected version) problem
# configuration file.

use strict;
use warnings;

my $MIN_GRAPH_SIZE = 2;

# The Subset Sum parser has a limit on the number of columns that can read per
# line; thus, having in mind the format we chosen to print the adjacency matrix
# (see below), the number of vertices must meet such limit.
my $MAX_GRAPH_SIZE = 512; # 1024 columns (1 vertex per 2 columns)

# Process the command-line arguments.

my $num_args = $#ARGV + 1;

if ($num_args == 0) {
    print_usage();
    exit 1;
} elsif ($num_args > 1 || $ARGV[0] < $MIN_GRAPH_SIZE
         || $ARGV[0] > $MAX_GRAPH_SIZE) {
    print "$0: Bad arguments\n";
    exit 0;
}
sub print_usage
{
    my $usage = <<END_USAGE;

    NAME
    \tautogen_hampath_config.pl - darwin's script for the hamiltonian path
    \t                            (undirected version) problem configuration file
    SYNOPSYS
    \tautogen_hampath_config.pl <number of vertices>
    DESCRIPTION
    \tautogen_hampath_config.pl generates the configuration file for the
    \tHamiltonian Path (undirected version) problem to be loaded afterwards by
    \tthe program darwin. It consists of a pseudo-randomly generated adjacency
    \tmatrix, with <number of vertices> rows and <number of vertices> columns,
    \tdefining the undirected graph; where <number of vertices> must be greater
    \tor equal than 2, and less than 512.
END_USAGE
    print "$usage";
    return;
}

# Set up the random generator.

my $process_id = $$;
srand($process_id);

sub random_int_inclusive
{
    my $lower = $_[0];
    my $upper = $_[1] + 1; # inclusive

    my $rint = int(rand($upper - $lower)) + $lower;
    return $rint;
}

# The output file.

my $file_name = "hampath.config";
open(my $fh, '>', $file_name)
    or die "Could not open file '$file_name' $!";

print $fh "# (autogenerated by '$0')\n";
print $fh "# Darwin configuration file\n";
print $fh "# Hamiltonian Path (undirected version) problem\n";
print $fh "# --------------------------------------------------\n";

my $dimension = $ARGV[0];
print $fh "DIMENSION\n";
print $fh "$dimension\n";

print $fh "ADJACENCY\n";
my @a;
for (my $row = 0; $row < $dimension; $row += 1) {
    for (my $col = $row; $col < $dimension; $col += 1) {
        # Upper triangle
        $a[$row][$col] = random_int_inclusive(0, 1);

        # diagonal?
        if ($row != $col) {
            # Symmetric lower triangle
            $a[$col][$row] = $a[$row][$col];
        }
    }
}
for (my $row = 0; $row < $dimension; $row += 1) {
    for (my $col = 0; $col < $dimension; $col += 1) {
        print $fh "$a[$row][$col] ";
    }
    print $fh "\n";
}

close $fh;
exit 1;
